{"version":3,"sources":["components/EmployeeRow/index.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeRow","props","key","id","src","avatar","alt","first_name","last_name","title","department","email","gender","Footer","className","Component","App","state","employees","sort","a","b","toLowerCase","ascending","handleChange","event","userInput","target","value","setState","result","filter","employee","match","console","log","handleSort","columnTitle","sortArray","toggle","placeholder","type","onChange","e","name","label","onClick","this","map","employeeObject","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"g8uBAkBeA,MAff,SAAqBC,GACjB,OACI,wBAAIC,IAAKD,EAAME,IACb,wBAAIA,GAAG,iBAAgB,yBAAKC,IAAKH,EAAMI,OAAQC,IAAKL,EAAME,MAC1D,4BAAKF,EAAMM,YACX,4BAAKN,EAAMO,WACX,4BAAKP,EAAMQ,OACX,4BAAKR,EAAMS,YACX,4BAAKT,EAAMU,OACX,4BAAKV,EAAMW,UCDNC,G,6KANP,OACI,yBAAKC,UAAU,aAAf,uC,GAHSC,cCgFNC,E,4MA3EbC,MAAQ,CAAEC,UAAWA,EAAUC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEZ,UAAUc,cAAgBD,EAAEb,UAAUc,cAAiB,GAAK,KAC3GC,WAAW,G,EAEbC,aAAe,SAAAC,GACb,IAAIC,EAAYD,EAAME,OAAOC,MAC3B,GAAiB,KAAdF,EACD,EAAKG,SAAS,CAACX,UAAWA,EAAUC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEZ,UAAUc,cAAgBD,EAAEb,UAAUc,cAAiB,GAAK,WAC7G,CACL,IAMEQ,EANiBZ,EAMGa,QAAO,SAAAC,GAAQ,OAAwE,OAApEA,EAASxB,UAAUc,cAAcW,MAAMP,EAAUJ,kBAC9FY,QAAQC,IAAIL,GACZ,EAAKD,SAAS,CAACX,UAAWY,M,EAG5BM,WAAa,SAACC,GACZ,IAAIC,EACEC,GAAU,EAAKtB,MAAMM,UAEzBe,EADCC,EACWrB,EAAUC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEiB,GAAaf,cAAgBD,EAAEgB,GAAaf,cAAiB,GAAK,KAE9FJ,EAAUC,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEgB,GAAaf,cAAgBF,EAAEiB,GAAaf,cAAiB,GAAK,KAE5G,EAAKO,SAAU,CAAEX,UAAWoB,EAAWf,UAAWgB,K,uDAG1C,IAAD,OACP,OACE,6BACA,yBAAKzB,UAAU,QACb,+DACA,yBAAKA,UAAU,SACf,2BAAO0B,YAAY,2BAA2BC,KAAK,SAASC,SAAU,SAAAC,GAAC,OAAI,EAAKnB,aAAamB,IAAIC,KAAK,QAAQC,MAAM,iBAEpH,+BACE,+BACE,4BACE,8CACA,wBAAIC,QAAS,kBAAM,EAAKV,WAAW,gBAAnC,cAA6D,uBAAGtB,UAAU,yBAC1E,wBAAIgC,QAAS,kBAAM,EAAKV,WAAW,eAAnC,aAA2D,uBAAGtB,UAAU,yBACxE,qCACA,0CACA,qCACA,wCAGJ,+BACGiC,KAAK9B,MAAMC,UAAU8B,KAAI,SAAAC,GACxB,OACE,kBAAC,EAAD,CACE/C,IAAK+C,EAAe9C,GACpBE,OAAQ4C,EAAe5C,OACvBE,WAAY0C,EAAe1C,WAC3BC,UAAWyC,EAAezC,UAC1BG,MAAOsC,EAAetC,MACtBC,OAAQqC,EAAerC,OACvBH,MAAOwC,EAAexC,MACtBC,WAAYuC,EAAevC,mBAQrC,kBAAC,EAAD,W,GAvEUK,aCMEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.d9cd7ca6.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nfunction EmployeeRow(props) {\n    return (\n        <tr key={props.id}>\n          <td id=\"employeeImage\"><img src={props.avatar} alt={props.id} /></td>\n          <td>{props.first_name}</td>\n          <td>{props.last_name}</td>\n          <td>{props.title}</td>\n          <td>{props.department}</td>\n          <td>{props.email}</td>\n          <td>{props.gender}</td>\n          \n        </tr>\n    )\n}\n\nexport default EmployeeRow;","import React, { Component } from 'react';\nimport './Footer.css';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className=\"copyright\">Copyright &copy; 2020 Weston Rose</div>\n        );\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport employees from './employees.json';\nimport './App.css';\nimport EmployeeRow from './components/EmployeeRow/index.js';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n\n  state = { employees: employees.sort((a, b) => (a.last_name.toLowerCase() > b.last_name.toLowerCase()) ? 1 : -1), \n    ascending: true }\n\n  handleChange = event => {\n    let userInput = event.target.value;\n      if(userInput === \"\") {\n        this.setState({employees: employees.sort((a, b) => (a.last_name.toLowerCase() > b.last_name.toLowerCase()) ? 1 : -1)})\n      } else {\n        const characters = employees;\n    // const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.';\n    // const regex = /[A-Z]/g;\n    // employee.last_name.toLowerCase.match(userInput.toLowerCase());\n\n    // console.log(found);\n    const result = characters.filter(employee => employee.last_name.toLowerCase().match(userInput.toLowerCase()) !== null);\n    console.log(result);\n    this.setState({employees: result})} \n  }\n\n  handleSort = (columnTitle) => {\n    let sortArray;\n    const toggle = !this.state.ascending;\n    if(toggle) {\n      sortArray = employees.sort((a, b) => (a[columnTitle].toLowerCase() > b[columnTitle].toLowerCase()) ? 1 : -1)\n    } else {\n      sortArray = employees.sort((a, b) => (b[columnTitle].toLowerCase() > a[columnTitle].toLowerCase()) ? 1 : -1)\n    }\n    this.setState( { employees: sortArray, ascending: toggle } );\n  }\n\n  render() {\n    return (\n      <div>\n      <div className=\"main\">\n        <h1>Weston Rose's Company Directory</h1>\n        <div className=\"input\">\n        <input placeholder=\"Search by Last Name Only\" type=\"search\" onChange={e => this.handleChange(e)} name=\"lname\" label=\"input field\" />\n        </div>\n        <table>\n          <thead>\n            <tr>\n              <th>Employee Photo</th>\n              <th onClick={() => this.handleSort(\"first_name\")}>First Name <i className=\"fas fa-arrows-alt-v\"></i></th>\n              <th onClick={() => this.handleSort(\"last_name\")}>Last Name <i className=\"fas fa-arrows-alt-v\"></i></th>\n              <th>Title</th>\n              <th>Department</th>\n              <th>Email</th>\n              <th>Gender</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.employees.map(employeeObject => {\n              return (\n                <EmployeeRow\n                  key={employeeObject.id}\n                  avatar={employeeObject.avatar}\n                  first_name={employeeObject.first_name}\n                  last_name={employeeObject.last_name}\n                  email={employeeObject.email}\n                  gender={employeeObject.gender}\n                  title={employeeObject.title}\n                  department={employeeObject.department}\n\n                />\n              )\n            })}\n          </tbody>\n        </table>\n        </div>\n        <Footer />  \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}